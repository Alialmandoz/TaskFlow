Documento de Proyecto: TaskFlow - Gestor Inteligente de Tareas y Proyectos

Última Actualización: 10 de mayo de 2025

Autor/Mantenedor Principal: Iván

1. Introducción y Visión General

TaskFlow es una aplicación web desarrollada con Django (Python) diseñada para ayudar a los usuarios a gestionar sus proyectos y tareas personales de una manera eficiente e inteligente. Más allá de una simple lista de quehaceres, TaskFlow busca integrar funcionalidades asistidas por Inteligencia Artificial (IA) a través de la API de Gemini de Google para facilitar la creación, organización y seguimiento de las actividades diarias y los objetivos a largo plazo.

La visión de TaskFlow es convertirse en un asistente personal proactivo que no solo almacena información, sino que también ayuda al usuario a priorizar, recordar y, eventualmente, analizar su productividad y gastos.

Características Clave Actuales:

Gestión de Proyectos y Tareas (CRUD básico vía interfaz web tradicional).

Autenticación de usuarios para la privacidad de los datos.

Creación de Proyectos y Tareas mediante comandos en lenguaje natural a través de una consola de IA integrada (usando Gemini API para Function Calling).

Módulo de Contabilidad Básica:

Registro de gastos.

Categorización de gastos.

Vinculación de gastos a proyectos específicos o como gastos personales.

Interfaz de administración de Django para la gestión de datos backend.

Uso de django-crispy-forms con Bootstrap 5 para un mejor renderizado de formularios.

2. Arquitectura y Tecnologías Utilizadas

Framework Backend: Django 5.2 (Python 3.13)

Base de Datos: SQLite3 (para desarrollo; fácilmente portable a PostgreSQL, MySQL, etc. para producción)

Frontend: Plantillas Django HTML, con CSS (Bootstrap 5 vía CDN) y JavaScript básico para interacciones (ej. consola de IA).

Inteligencia Artificial: Google Gemini API (específicamente gemini-1.5-flash-latest o similar) para:

Interpretación de lenguaje natural.

Function Calling para la creación de entidades (proyectos, tareas).

(Planeado) Categorización automática, sugerencias, etc.

Gestión de Formularios: django-crispy-forms con el paquete crispy-bootstrap5.

Gestión de Dependencias Python: pip con un entorno virtual (venv).

Variables de Entorno: Uso de archivo .env y la biblioteca python-dotenv para gestionar claves de API sensibles (ej. GOOGLE_API_KEY).

Estructura del Proyecto (Principales Apps):

TaskFlowProject/: Carpeta de configuración principal del proyecto Django.

settings.py: Configuración global, INSTALLED_APPS, base de datos, claves API, configuración de crispy-forms.

urls.py: Enrutador principal de URLs del proyecto.

tasks/: Aplicación Django para la gestión de Proyectos y Tareas.

models.py: Define los modelos Project y Task.

views.py: Contiene la lógica para listar/detallar/crear proyectos y tareas (manual y vía IA), y el ai_command_handler.

forms.py: Define ProjectForm y TaskForm.

urls.py: URLs específicas de la app tasks.

services.py: Lógica de negocio desacoplada para crear proyectos/tareas, utilizada por ai_command_handler.

templates/tasks/: Plantillas HTML para la app tasks, incluyendo base.html (plantilla base principal) y project_list.html (dashboard).

accounting/: Aplicación Django para la gestión de contabilidad básica.

models.py: Define los modelos Category (para gastos) y Transaction.

views.py: Contiene la lógica para crear y (futuramente) listar transacciones.

forms.py: Define TransactionForm.

urls.py: URLs específicas de la app accounting.

templates/accounting/: Plantillas HTML para la app accounting.

admin.py: Configuración para que los modelos de accounting sean gestionables en el admin de Django.

3. Flujos de Usuario y Funcionalidades Detalladas

3.1. Gestión de Proyectos y Tareas (Dashboard Principal - tasks:project_list)

Visualización: La página principal (/tasks/projects/) actúa como un dashboard. Muestra:

Una consola de IA para crear proyectos/tareas con lenguaje natural.

Una lista de todos los proyectos del usuario autenticado.

Para cada proyecto, se listan sus tareas asociadas directamente en el dashboard.

Creación con IA:

El usuario escribe una instrucción en la consola de IA (ej. "Crear proyecto 'X' con descripción 'Y'", "Añadir tarea 'Z' al proyecto 'X'").

JavaScript envía esta instrucción al endpoint /tasks/ai-command/.

La vista ai_command_handler usa Gemini API con Function Calling para interpretar la instrucción y determinar si se debe llamar a create_project o create_task.

Si se identifica una función, se extraen los argumentos y se llama a las funciones correspondientes en tasks/services.py (create_project_for_user, create_task_for_project).

Se devuelve una respuesta JSON al frontend, que se muestra en el área de respuesta. La página se recarga tras una creación exitosa para reflejar los cambios.

Creación Manual (Enlaces Opcionales):

Existen enlaces en la navegación para acceder a formularios de creación manual de proyectos (/tasks/projects/new/) y tareas (/tasks/projects/<project_pk>/tasks/new/).

Estos utilizan ProjectForm y TaskForm respectivamente.

Detalle de Proyecto: Al hacer clic en un proyecto, se accede a tasks:project_detail (/tasks/projects/<pk>/), que muestra los detalles del proyecto y sus tareas (funcionalidad existente que podría ser integrada o reemplazada por la vista de dashboard mejorada).

3.2. Gestión de Contabilidad Básica

Modelos:

Category: Permite al usuario definir sus propias categorías de gastos (ej. "Comida", "Transporte", "Materiales"). Cada categoría pertenece a un usuario.

Transaction: Registra un gasto con descripción, monto, fecha, tipo (actualmente solo "gasto"), y opcionalmente una categoría y un proyecto de TaskFlow asociado. Cada transacción pertenece a un usuario.

Creación de Transacciones (Manual):

Se accede a través de un enlace en la navegación principal (/accounting/transaction/add/).

Utiliza TransactionForm, que permite seleccionar descripción, monto, fecha, categoría (filtrada por el usuario) y proyecto (filtrado por el usuario).

La vista transaction_create en accounting/views.py maneja el guardado, asociando el usuario actual.

Administración: Las Categorías y Transacciones son completamente gestionables a través del sitio de administración de Django, con filtros y búsquedas personalizadas para facilitar la gestión por el administrador (o el usuario si tuviera acceso).


5. Áreas de Futuro Desarrollo y Features Planeadas (Resumen de Discusión)

Listado y Reportes de Contabilidad:

Página para listar todas las transacciones con filtros (fecha, categoría, proyecto).

Reportes básicos: gastos por categoría, gastos totales por proyecto.

Integración de IA en Contabilidad:

Categorización automática de gastos al ingresar la descripción en el TransactionForm o vía la consola de IA.

Parseo de montos y fechas desde la descripción si la IA puede identificarlos.

Recordatorios Inteligentes: Notificaciones proactivas y personalizadas para tareas. (Requerirá Celery o similar).

Búsqueda Semántica Avanzada: Usar IA para buscar tareas/proyectos/gastos con lenguaje natural.

Estimación de Tiempo/Esfuerzo Asistida por IA: Para tareas.

Bandeja de Entrada de Tareas "Flotantes": Para captura rápida sin asignación inmediata a proyecto.

Integración con Google Calendar: Para sincronizar tareas con fechas de vencimiento como eventos. (Requerirá OAuth 2.0).

Mejoras en la Interfaz de Usuario (UI/UX):

Actualización dinámica del DOM tras acciones de IA (para evitar recargas de página).

Mejor diseño visual general.

Paneles de progreso de proyectos.

6. Principios de Diseño y "Artesanía" Aplicados

Modularidad: Separación de funcionalidades en apps Django (tasks, accounting).

Servicios Desacoplados: Lógica de negocio en archivos services.py para ser reutilizada (ej. por vistas de IA y vistas de formularios tradicionales).

Experiencia de Usuario: Énfasis en simplificar la entrada de datos, especialmente con la asistencia de IA.

Seguridad: Uso de @login_required, filtrado de datos por usuario, manejo seguro de claves API, protección CSRF.

Desarrollo Iterativo: Construir features en pequeños incrementos funcionales (MVP).

Código Limpio y Mantenible: Uso de comentarios, nombres descriptivos, y seguimiento de convenciones de Django.

Iván, este documento debería proporcionar una buena visión general del estado actual y la dirección de TaskFlow. Puedes (¡y deberías!) expandirlo y refinarlo a medida que el proyecto evoluciona. Añadir diagramas de flujo de datos o de arquitectura de componentes también podría ser muy útil en el futuro.

Espero que esto sirva como una excelente guía para cualquiera que se una al proyecto o para ti mismo al revisarlo más adelante.